{"version":3,"sources":["store/ducks/repositories/types.ts","components/RepositoryItem/index.tsx","components/RepositoryList/index.tsx","store/ducks/repositories/actions.ts","components/RepositoryList/container.ts","store/ducks/repositories/reducer.ts","store/ducks/rootReducer.ts","services/api.ts","store/ducks/repositories/sagas.ts","store/ducks/rootSaga.ts","store/index.ts","App.tsx","index.tsx"],"names":["RepositoriesTypes","RepositoryItem","_ref","repository","react_default","a","createElement","name","RepositoryList","repositories","loadRequest","useEffect","map","key","id","action","LOAD_REQUEST","loadSuccess","data","LOAD_SUCCESS","loadFailure","error","LOAD_FAILURE","connect","state","dispatch","bindActionCreators","RepositoriesActions","INITIAL_STATE","loading","reducer","arguments","length","undefined","type","Object","objectSpread","payload","combineReducers","api","axios","create","baseURL","load","response","regenerator_default","wrap","_context","prev","next","call","get","sent","put","t0","stop","_marked","this","rootSaga","all","takeLatest","abrupt","rootSaga_marked","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","App","es","container","ReactDOM","render","src_App","document","getElementById"],"mappings":"sRAGYA,kDCIGC,EAAA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAH,OAA8BC,EAAAC,EAAAC,cAAA,UAAKH,EAAWI,OCwB9CC,EAd0B,SAAAN,GAAmC,IAAhCO,EAAgCP,EAAhCO,aAAcC,EAAkBR,EAAlBQ,YAKxD,OAJAC,oBAAU,WACRD,KACC,IAGDN,EAAAC,EAAAC,cAAA,UACGG,EAAaG,IAAI,SAAAT,GAAU,OAC1BC,EAAAC,EAAAC,cAACL,EAAD,CAAgBY,IAAKV,EAAWW,GAAIX,WAAYA,0BFtB5CH,mJGAL,IAAMU,EAAc,kBAAMK,iBAAOf,EAAkBgB,eAC7CC,EAAc,SAACC,GAAD,OACzBH,iBAAOf,EAAkBmB,aAAc,CAAED,UAC9BE,EAAc,SAACC,GAAD,OACzBN,iBAAOf,EAAkBsB,aAAc,CAAED,WCO5BE,cAPS,SAACC,GAAD,MAA8B,CACpDf,aAAce,EAAMf,aAAaS,OAGR,SAACO,GAAD,OACzBC,YAAmBC,EAAqBF,IAE3BF,CAGbf,mBCdIoB,EAAmC,CACvCV,KAAM,GACNG,OAAO,EACPQ,SAAS,GAqBIC,EAlB6B,WAAmC,IAAlCN,EAAkCO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BH,EAAeb,EAAWgB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7E,OAAQlB,EAAOmB,MACb,KAAKlC,EAAkBgB,aACrB,OAAOmB,OAAAC,EAAA,EAAAD,CAAA,GAAKX,EAAZ,CAAmBK,SAAS,IAC9B,KAAK7B,EAAkBmB,aACrB,OAAOgB,OAAAC,EAAA,EAAAD,CAAA,GACFX,EADL,CAEEK,SAAS,EACTR,OAAO,EACPH,KAAMH,EAAOsB,QAAQnB,OAEzB,KAAKlB,EAAkBsB,aACrB,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GAAKX,EAAZ,CAAmBK,SAAS,EAAOR,OAAO,EAAMH,KAAM,KACxD,QACE,OAAOM,ICpBEc,cAAgB,CAC7B7B,iDCEa8B,SAJHC,EAAMC,OAAO,CACvBC,QAAS,sCCEMC,GAAV,SAAUA,IAAV,IAAAC,EAAA,OAAAC,EAAAxC,EAAAyC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEc,OAFdF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEoBC,YAAKX,EAAIY,IAAK,0BAFlC,OAIH,OAFMP,EAFHG,EAAAK,KAAAL,EAAAE,KAAA,EAIGI,YAAIpC,EAAY2B,EAAS1B,OAJ5B,OAAA6B,EAAAE,KAAA,gBAMH,OANGF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAAAA,EAAAE,KAAA,GAMGI,YAAIjC,EAAW2B,EAAAO,KANlB,yBAAAP,EAAAQ,SAAAC,EAAAC,KAAA,wBCAkBC,GAAV,SAAUA,IAAV,OAAAb,EAAAxC,EAAAyC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACN,OADMF,EAAAE,KAAA,EACAU,YAAI,CAACC,YAAW5D,EAAkBgB,aAAc2B,KADhD,cAAAI,EAAAc,OAAA,SAAAd,EAAAK,MAAA,wBAAAL,EAAAQ,SAAAO,EAAAL,MCOf,IAAMM,EAAiBC,cAEjBC,EAAiCC,YACrCC,EACAC,YAAgBL,IAGlBA,EAAeM,IAAIX,GAEJO,QCRAK,EANH,kBACVlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAUN,MAAOA,GACf7D,EAAAC,EAAAC,cAACkE,EAAD,QCLJC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.6435cf9e.chunk.js","sourcesContent":["/**\n * Action types\n */\nexport enum RepositoriesTypes {\n  LOAD_REQUEST = '@repositories/LOAD_REQUEST',\n  LOAD_SUCCESS = '@repositories/LOAD_SUCCESS',\n  LOAD_FAILURE = '@repositories/LOAD_FAILURE',\n}\n\n/**\n * Data types\n */\nexport interface Repository {\n  id: number;\n  name: string;\n}\n\nexport interface RepositoriesList {\n  repositories: Repository[];\n}\n\n/**\n * State type\n */\nexport interface RepositoriesState {\n  readonly data: Repository[];\n  readonly loading: boolean;\n  readonly error: boolean;\n}\n","import React from 'react';\nimport { Repository } from '../../store/ducks/repositories/types';\n\ninterface OwnProps {\n  repository: Repository;\n}\n\nexport default ({ repository }: OwnProps) => <li>{repository.name}</li>;\n","import React, { useEffect } from 'react';\n\nimport {\n  Repository,\n  RepositoriesList,\n} from '../../store/ducks/repositories/types';\nimport RepositoryItem from '../RepositoryItem';\n\ntype StateProps = RepositoriesList;\n\ninterface DispatchProps {\n  loadRequest(): void;\n  loadSuccess(data: Repository[]): void;\n}\n\nexport type Props = StateProps & DispatchProps;\n\nconst RepositoryList: React.SFC<Props> = ({ repositories, loadRequest }) => {\n  useEffect(() => {\n    loadRequest();\n  }, []);\n\n  return (\n    <ul>\n      {repositories.map(repository => (\n        <RepositoryItem key={repository.id} repository={repository} />\n      ))}\n    </ul>\n  );\n};\n\nexport default RepositoryList;\n","import { action } from 'typesafe-actions';\nimport { Repository, RepositoriesTypes } from './types';\n\nexport const loadRequest = () => action(RepositoriesTypes.LOAD_REQUEST);\nexport const loadSuccess = (data: Repository[]) =>\n  action(RepositoriesTypes.LOAD_SUCCESS, { data });\nexport const loadFailure = (error: Error) =>\n  action(RepositoriesTypes.LOAD_FAILURE, { error });\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport RepositoryList from '.';\nimport { ApplicationState } from '../../store';\nimport * as RepositoriesActions from '../../store/ducks/repositories/actions';\n\nconst mapStateToProps = (state: ApplicationState) => ({\n  repositories: state.repositories.data,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(RepositoriesActions, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RepositoryList);\n","import { RepositoriesState, RepositoriesTypes } from './types';\nimport { Reducer } from 'redux';\n\nconst INITIAL_STATE: RepositoriesState = {\n  data: [],\n  error: false,\n  loading: false,\n};\n\nconst reducer: Reducer<RepositoriesState> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case RepositoriesTypes.LOAD_REQUEST:\n      return { ...state, loading: true };\n    case RepositoriesTypes.LOAD_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.payload.data,\n      };\n    case RepositoriesTypes.LOAD_FAILURE:\n      return { ...state, loading: false, error: true, data: [] };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport repositories from './repositories/reducer';\n\nexport default combineReducers({\n  repositories,\n});\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import { call, put } from 'redux-saga/effects';\n\nimport api from '../../../services/api';\nimport { loadSuccess, loadFailure } from './actions';\n\nexport function* load() {\n  try {\n    const response = yield call(api.get, 'users/henriqueaf/repos');\n\n    yield put(loadSuccess(response.data));\n  } catch (error) {\n    yield put(loadFailure(error));\n  }\n}\n","import { all, takeLatest } from 'redux-saga/effects';\n\nimport { RepositoriesTypes } from './repositories/types';\nimport { load } from './repositories/sagas';\n\nexport default function* rootSaga() {\n  return yield all([takeLatest(RepositoriesTypes.LOAD_REQUEST, load)]);\n}\n","import { createStore, Store, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { RepositoriesState } from './ducks/repositories/types';\n\nimport rootReducer from './ducks/rootReducer';\nimport rootSaga from './ducks/rootSaga';\n\nexport interface ApplicationState {\n  repositories: RepositoriesState;\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store: Store<ApplicationState> = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport RepositoryList from './components/RepositoryList/container';\n\nimport store from './store';\n\nconst App = () => (\n  <Provider store={store}>\n    <RepositoryList />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}